{
  "hash": "162323c05fa1b6f330e67a96429be1b6",
  "result": {
    "markdown": "---\ntitle: \"Python - Iris Analysis and Visualization\"\nauthor: \"Bailie Wynbelt\"\ndate: \"2023-10-17\"\ncategories: [Python, Analysis, Visualization]\nimage: \"iris.jpg\"\nformat: html\n---\n\nI used the free Iris data set and python to conduct analysis and create visualizations\n\n## Importing and loading required packages\n\nThe following code is importing both the pandas and matplotlib.pyplot package so specific functions can be used to analyze and visualize the data! Lets get started with exploring. It is important to note that these packages need to be installed first on your computer before you can run this\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n## Importing iris data set\nThe iris data set is a free data set that is available! Below I am importing the data using the pd.read_csv function.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Create column names for dataframe\ncol_names = ['sepal_length_cm','sepal_width_cm','petal_length_cm','petal_width_cm','species']\n\n# Download data from url\ncsv_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'\n\n# Import url using read_csv\niris = pd.read_csv(csv_url, names = col_names)\n```\n:::\n\n\n## Gaining a general oversight of the data\n\nThe **head()** and **tail()** functions give a general oversight of what the data is comprised of in terms of rows and columns. Moreover, we can view the first and last 5 rows of data.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\niris.head()\niris.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length_cm</th>\n      <th>sepal_width_cm</th>\n      <th>petal_length_cm</th>\n      <th>petal_width_cm</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>145</th>\n      <td>6.7</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>6.3</td>\n      <td>2.5</td>\n      <td>5.0</td>\n      <td>1.9</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.0</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>6.2</td>\n      <td>3.4</td>\n      <td>5.4</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>5.9</td>\n      <td>3.0</td>\n      <td>5.1</td>\n      <td>1.8</td>\n      <td>Iris-virginica</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nGreat! Now we know what our data looks like. However, I want to make sure the data format is okay. To do so, I am going to confirm the data types of iris using the .dtypes. function. We can now see that the columns are all floats except the species column. This looks all good!\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\niris.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nsepal_length_cm    float64\nsepal_width_cm     float64\npetal_length_cm    float64\npetal_width_cm     float64\nspecies             object\ndtype: object\n```\n:::\n:::\n\n\n## Data tidying\n\nThe following lines of code are tidying the data set. The code is looking to see if the data set have any NA's. We can now see that there is zero NA's. This means we do not need to drop any rows.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\niris.isna().sum().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0\n```\n:::\n:::\n\n\n## Data manipulation\n\nThe following lines of code are manipulation the data set. The code is converting centimeters to millimeters. First, I created a function that converts from cm to mm and used .apply to apply to specific columns.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef cm_to_mm(cm):\n    return cm * 10\n\niris['sepal_length_mm'] = iris['sepal_length_cm'].apply(cm_to_mm)\niris['sepal_length_mm'] = iris['sepal_width_cm'].apply(cm_to_mm)\niris['petal_length_mm'] = iris['petal_length_cm'].apply(cm_to_mm)\n\niris\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length_cm</th>\n      <th>sepal_width_cm</th>\n      <th>petal_length_cm</th>\n      <th>petal_width_cm</th>\n      <th>species</th>\n      <th>sepal_length_mm</th>\n      <th>petal_length_mm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.1</td>\n      <td>3.5</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n      <td>35.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.9</td>\n      <td>3.0</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n      <td>30.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.7</td>\n      <td>3.2</td>\n      <td>1.3</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n      <td>32.0</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n      <td>31.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n      <td>36.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>6.7</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n      <td>30.0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>6.3</td>\n      <td>2.5</td>\n      <td>5.0</td>\n      <td>1.9</td>\n      <td>Iris-virginica</td>\n      <td>25.0</td>\n      <td>50.0</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.0</td>\n      <td>Iris-virginica</td>\n      <td>30.0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>6.2</td>\n      <td>3.4</td>\n      <td>5.4</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n      <td>34.0</td>\n      <td>54.0</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>5.9</td>\n      <td>3.0</td>\n      <td>5.1</td>\n      <td>1.8</td>\n      <td>Iris-virginica</td>\n      <td>30.0</td>\n      <td>51.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows Ã— 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Data analysis of species\n\nBelow are lines of code that are summarizing the data based on specific attributes. The following is grouping the data by flower species, and calculating the mean of sepal length, sepal width, and petal length. This data is added to a new data frame called **\"species_summary\"**. For the purpose of this question, we are only interested in using columns that contain data in cm.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nspecies_summary = iris.groupby('species').agg({\n    'sepal_length_cm': ['mean', 'min', 'max'],\n    'sepal_width_cm': ['mean', 'min', 'max'],\n    'petal_length_cm': ['mean', 'min', 'max']}).reset_index()\n\n\nspecies_summary.columns = ['species', \n'mean_sepal_length', 'min_sepal_length','max_sepal_length',\n'mean_sepal_width', 'min_sepal_width', 'max_sepal_width',\n'mean_petal_length', 'min_petal_length', 'max_petal_length']\n```\n:::\n\n\n## Data visualization of sepal length vs sepal width of species\n\nNow, lets visualize the data! This will help us visualize if there are any notable differences in sepal length vs width of different Iris species. The code lines below are utilizing the **matlibplot** package to visualize the data. This data is a scatter plot with *sepal length* on the x-axis and *sepal width* on the y-axis, with the color of data points being differentiated by species Additionally, the graph is faceted by *species* of the penguins\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Create colorblind friendly palette\nc_palette = [\"#377eb8\", \"#ff7f00\", \"#4daf4a\"]\n\n# Create plot\niris_plot = sns.FacetGrid(iris, hue = \"species\", palette = c_palette)\niris_plot.map(plt.scatter, \"sepal_length_cm\", \"sepal_width_cm\")\n\n# Add regression line\niris_plot.map(sns.regplot, \"sepal_length_cm\", \"sepal_width_cm\", scatter = False)\n\n# Add legend\niris_plot.add_legend(title=\"Iris Species:\", frameon = True, facecolor = \"lightgrey\")\n\n# Fix labels\niris_plot.set_axis_labels(\"Sepal Length (cm)\", \"Sepal Width (cm)\")\niris_plot.set_titles(\"Scatterplot with Linear Regression Lines by Species\")\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=394 height=278}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}