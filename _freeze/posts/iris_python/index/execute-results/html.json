{
  "hash": "fc43771f95f3d7afd15d1d65ea9e6a3b",
  "result": {
    "markdown": "---\ntitle: Python Data Wrangling Workshop\nauthor: Bailie Wynbelt\ndate: '2023-10-17'\ncategories:\n  - Python\n  - Analysis\n  - Visualization\nimage: iris.jpg\nformat: html\n---\n\nThe following is a workshop that I created to teach beginner programmers an introduction to data wrangling in Python using Pandas!\n\n# Python data wrangling workshop\n\n-   An introduction to the pandas package\n-   Bailie Wynbelt / Jeff Oliver\n-   3 February, 2023\n\n### Objectives / Learning Outcomes\n\n1.  Manipulate data and extract information from datasets using pandas\n2.  Create descriptive summary statistics\n3.  Output data visualizations with (plot9)\n\n## Data Science: more fun, less pain\n\nBut wait...you might be wondering what is pandas and how can we use it in Data Science?\n\nPython is a dynamic language that can be used for a variety of problems these ranging from Software Enginnering to Data Science. Today, we are going to focus on how to use Python, specifically the pandas package, to wrangle, analyze, and visualize data. The pandas package is a collection of functions that allows us to easily manipulate, summarize, and visualize data. In this lesson, we will use the pandas package and the iris dataset to wrangle data, create summary statistics, and develop appealing visualizations.\n\n-   Descriptive statisitcs and visualization with pandas\n-   Bailie Wynbelt\n-   wynbeltb\\@arizona.edu\n-   2024-02-04\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#import statements\nimport pandas as pd\n\nimport numpy as np\n\nfrom plotnine import *\n```\n:::\n\n\nNow that we have imported all the required packages, we can read in the data.\n\nTo do this we will use the read_csv() function from pandas\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#import iris data set\n#This is a dataframe, meaning it is a two-dimentional structure.\ncsv_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data' #get csv url\n\niris =  pd.read_csv(csv_url, names = ['sepal_length','sepal_width','petal_length','petal_width','species'])\n\niris\n```\n:::\n\n\n## Explore the Data\n\nWe have imported the pandas package and the dataset! Now we can start exploring the dataset and working on summarizing the data.\n\nSome of my favorite ways of exploring the dataset include the following:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#Gives the number of rows and columns in the format (rows, columns)\niris.shape()\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#Shows the name ofthe column, number of non-null values, and the datatype.\niris.info()\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#Returns the first 5 rows\niris.head()\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#Returns the last 5 rows\niris.tail()\n```\n:::\n\n\nWe have imported the pandas package/dataset and have explored the data! Now we can start working on summarizing the data.\n\n## Summarizing the data\n\nHow can we create descriptive statistics for the iris dataset? -Means -Standard errors -For each trait -For each species\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n#Quick statisitic summary of data\niris.describe()\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n#Find the mean of sepal length for all species\niris_mean = iris[\"sepal_length\"].mean()\n\niris_mean\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#Find the standard deviation of sepal length for all species\niris_std = iris[\"sepal_length\"].std()\n\niris_std\n```\n:::\n\n\nWe have found the mean and standard deviation for sepal_length. However, there are also different species, so what if there are differences in traits between species?\n\nTo explore this question we can use the groupby function.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n#find the mean for each species for each trait (column)\niris_mean = iris.groupby('species').mean()\n\niris_mean\n```\n:::\n\n\nWhat if we also want to find the standard deviation for each trait for each species?\n\nWe can use the agg function alongside the groupby function.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n#find the mean and standard deviation for each species for each trait (column)\niris_stats = iris.groupby('species').agg(['mean', 'std'])\n\niris_stats\n```\n:::\n\n\nGreat! Now we have a descriptive statistics for all species and traits. Similar steps can be taken if you just want to find descriptive statistics for one column or trait. Lets explore how to do this below.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n#find the mean per species for sepal length\niris_mean = iris.groupby('species')['sepal_length'].mean()\n\niris_mean\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n#find the mean and standard deviation for sepal length of each species\niris_stats = iris.groupby('species')['sepal_length'].agg(['mean', 'std'])\n\niris_stats\n```\n:::\n\n\n## Plotting Data\n\nSo far we have:\n\n-   read the data\n-   explored the data\n-   created descriptive statistics\n\nWe are now read to visualize the data! In R, people commonly use ggplot2 to visualize datasets. In python, we will use plot9 which essentially functions similarly to ggplot2 and outputs similar visualizations\n\nFirst, we need to create a general plot and then state what type of plot we want.\n\nWe are going to create a scatterplot displaying sepal length on the x-axis and sepal width on the y-axis.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n(ggplot(iris, aes(x = \"sepal_length\", y = \"sepal_width\")) \n+ geom_point())\n```\n:::\n\n\nIt looks like there is two distinct groupings within our scatterplot, lets explore this more by adding an extra argument into the aes() function.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n(ggplot(iris, aes(x = \"sepal_length\", y = \"sepal_width\", color = \"species\")) \n+ geom_point())\n```\n:::\n\n\nLastly, we can better visualize the differences between species by faceting and creating a linear model. This can be done by adding the facet_wrap and stat_smooth argument.\n\nA facet wrap is dividing the graph into sections based on a particular variable. In our case, it is species.\n\nLastly, we can beautify the graph by adding labels and a title.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n(ggplot(iris, aes(x = \"sepal_length\", \n                  y = \"sepal_width\", \n                  color = \"species\")) +\n        geom_point() +\n        facet_wrap(\"~species\") +\n        stat_smooth(method = \"lm\", color = \"black\") +\n        labs(x = \"Sepal Legnth\",\n            y = \"Sepal Width\",\n            title = \"Sepal Length VS Sepal Width of Iris Species\"))\n```\n:::\n\n\n# Your turn!\n\nGreat! We were able to explore the data, find descriptive statistics, and create a visualization.\n\nNow, it is your turn to work together and explore the palmers penguins dataset, with the end goal of finding descriptive statistics and a visualization.\n\nFirst, lets start with loading in the data. We will do this together\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n#load in the data\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n```\n:::\n\n\n## Explore the dataset\n\nEmploy one or two of the exploratory functions we used before. Use which ever ones are your favorite!\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n#explore the data\npenguins.head()\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npenguins.tail()\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\npenguins.describe()\n```\n:::\n\n\n## Find Descriptive Statistics\n\nWe want to find descriptive statistics for the dataset! For your challenge, find the mean and standard deviation of the \"body_mass_g\" column per species\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\npenguins_stats = penguins.groupby('species')['body_mass_g'].agg(['mean', 'std'])\n\npenguins_stats\n```\n:::\n\n\n## Visualization\n\nFor your next challenge... try creating a visualization that displays body mass on the x-axis vs flipper length on the y-axis with color differentiated by sex (color in the aes() argument) and the graph faceted by species. Add labels that you see fit to the graph.\n\nSteps to be taken 1) Create a scatterplot (geom_point) with \"body_mass_g\" on the x-axis and \"flipper_length_mm\" on the y-axis. Don't forgot to add aes(color = ) set to \"sex\" ! 2) Add a facet_wrap by \"species\" 3) Add labels with the labs() argument\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\npenguins_stats = penguins.groupby('species')['body_mass_g'].agg(['mean', 'std'])\n\npenguins_stats\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}